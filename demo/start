#!/bin/bash
source ./demo-vars.sh

main() {
  if [[ "$($DOCKER ps | grep $DEMO_CONTAINER)" != "" ]]; then
    echo "Stopping and removing demo container..."
    $DOCKER stop $DEMO_CONTAINER && $DOCKER rm $DEMO_CONTAINER
    $DOCKER stop $MYSQL_SERVER && $DOCKER rm $MYSQL_SERVER
  fi
  check_dependencies
  load_policy
  generate_identity_files
  build_image
  start_container
  initialize_demo
  # Intialize DB
  export MYSQL_ROOT_PASSWORD=$(./ccloud-cli.sh get $MYSQL_PASSWORD_ID)
  export MYSQL_LOGIN_PORT=$(./ccloud-cli.sh get $MYSQL_LOGIN_PORT_ID)
  cd mysql
    ./1-mysql-server-start.sh
  cd ..
  $DOCKER exec -it $DEMO_CONTAINER bash
}

##############################
check_dependencies() {
  all_deps_good=true

  echo
  echo "Verifying env vars..."
  if [[ "$DOCKER_HOSTNAME" == '<<YOUR_VALUE_HERE>>' ]]; then
    echo "Env var DOCKER_HOSTNAME must be set to a proper value in demo-vars.sh."
    all_deps_good=false
  fi
  if [[ "$IDENTITY_TENANT_ID" == '<<YOUR_VALUE_HERE>>' ]]; then
    echo "Env var IDENTITY_TENANT_ID must be set to a proper value in demo-vars.sh."
    all_deps_good=false
  fi
  if [[ "$CYBERARK_SUBDOMAIN_NAME" == "<<YOUR_VALUE_HERE>>" ]]; then
    echo "Env var CYBERARK_SUBDOMAIN_NAME must be set to a proper value in demo-vars.sh."
    all_deps_good=false
  fi
  if [[ "$WORKLOAD_ID" == "<<YOUR_VALUE_HERE>>" ]]; then
    echo "Env var WORKLOAD_ID must be set to a proper value in demo-vars.sh."
    all_deps_good=false
  fi
  if [[ "$SAFE_NAME" == "<<YOUR_VALUE_HERE>>" ]]; then
    echo "Env var SAFE_NAME must be set to a proper value in demo-vars.sh."
    all_deps_good=false
  fi
  if [[ "$ACCOUNT_NAME" == "<<YOUR_VALUE_HERE>>" ]]; then
    echo "Env var ACCOUNT_NAME must be set to a proper value in demo-vars.sh."
    all_deps_good=false
  fi

  # Safe must exist
  # must have 'Conjur Sync' as a member
  # must contain value in MYSQL_ACCOUNT_NAME

  echo
  echo "Verifying vault dependencies..."
  if [[ "$(./pcloud-cli.sh safe_get $SAFE_NAME)" == "" ]]; then
    echo "Safe $SAFE_NAME not found."
    all_deps_good=false
  fi

  if [[ "$(./pcloud-cli.sh safe_account $SAFE_NAME $ACCOUNT_NAME)" == "" ]]; then
    echo "Account $ACCOUNT_NAME not found in Safe $SAFE_NAME."
    all_deps_good=false
  fi

  if [[ "$(./pcloud-cli.sh safe_member $SAFE_NAME 'Conjur Sync')" == "" ]]; then
    echo "Member 'Conjur Sync' not found in Safe $SAFE_NAME."
    all_deps_good=false
  fi

  echo
  if $all_deps_good; then
    echo "Verified all env vars and vault dependencies are met."
  else
    echo "Please address above issues and retry."
    exit -1
  fi 
}

##############################
load_policy() {
  cat templates/ansible-policy.template		\
  | sed -e "s#{{ WORKLOAD_ID }}#$WORKLOAD_ID#g" \
  | sed -e "s#{{ SAFE_NAME }}#$SAFE_NAME#g"	\
  > ansible-policy.yml
  ./ccloud-cli.sh append data ./ansible-policy.yml
  echo
}

##############################
generate_identity_files() {
  CONJUR_AUTHN_API_KEY=$(./ccloud-cli.sh rotate $CONJUR_AUTHN_LOGIN)

  # create configuration and identity files (AKA conjurize the host)
  echo "Generating identity file..."
  cat <<IDENTITY_EOF > conjur.identity
machine $CONJUR_CLOUD_URL/authn
  login host/$CONJUR_AUTHN_LOGIN
  password $CONJUR_AUTHN_API_KEY
IDENTITY_EOF

  echo "Generating host configuration file..."
  cat <<CONF_EOF > conjur.conf
---
appliance_url: $CONJUR_CLOUD_URL
account: conjur
netrc_path: "/etc/conjur.identity"
cert_file: ""
CONF_EOF
}

##############################
build_image() {
  if [[ "$($DOCKER images -q $DEMO_IMAGE)" == "" ]]; then
    cd build
      ./build.sh
    cd .. 
  fi
}

##############################
start_container() {
    $DOCKER run -d \
    --name $DEMO_CONTAINER \
    -e "MYSQL_DB_NAME=$MYSQL_DB_NAME" \
    -e "MYSQL_LOGIN_HOST_ID=$MYSQL_LOGIN_HOST_ID" \
    -e "MYSQL_LOGIN_PORT_ID=$MYSQL_LOGIN_PORT_ID" \
    -e "MYSQL_LOGIN_USER_ID=$MYSQL_LOGIN_USER_ID" \
    -e "MYSQL_PASSWORD_ID=$MYSQL_PASSWORD_ID" \
    -e "TERM=xterm" \
    --restart always \
    --entrypoint "sh" \
    $DEMO_IMAGE \
    -c "sleep infinity"
}

##############################
initialize_demo() {
  # copy conjur.* files to ansible container
  $DOCKER cp ./conjur.conf $DEMO_CONTAINER:/etc
  $DOCKER cp ./conjur.identity $DEMO_CONTAINER:/etc
  $DOCKER exec $DEMO_CONTAINER chmod 400 /etc/conjur.identity
  rm ./conjur*

  # instantiate Summon secrets.yml file
  create_summon_secrets_yml

  # copy demo directory hierarchy to ansible container
  $DOCKER cp ./demo/. $DEMO_CONTAINER:/demo/
}

##############################
create_summon_secrets_yml() {
  cat templates/secrets.template				\
  | sed -e "s#{{ MYSQL_LOGIN_HOST_ID }}#$MYSQL_LOGIN_HOST_ID#g"	\
  | sed -e "s#{{ MYSQL_LOGIN_PORT_ID }}#$MYSQL_LOGIN_PORT_ID#g"	\
  | sed -e "s#{{ MYSQL_LOGIN_USER_ID }}#$MYSQL_LOGIN_USER_ID#g"	\
  | sed -e "s#{{ MYSQL_PASSWORD_ID }}#$MYSQL_PASSWORD_ID#g"	\
  > ./demo/summon/secrets.yml
}

main $@
